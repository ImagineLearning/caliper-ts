{
	"extends": ["@imaginelearning/eslint-config/base"],
	"parserOptions": {
		"project": [
			"./tsconfig.json",
			"./packages/caliper-ts/tsconfig.json",
			"./packages/caliper-ts/tsconfig.tests.json"
		]
	},
	"overrides": [
		{
			// Overrides for generated code
			"files": ["packages/caliper-ts-objects/src/**/*.ts"],
			"rules": {
				"@typescript-eslint/no-explicit-any": "off",
				"@typescript-eslint/naming-convention": [
					"error",
					{ "selector": "default", "format": ["camelCase"] },
					// Generated code is coming from C#, so don't enforce naming conventions for functions
					{ "selector": "function", "format": null },
					{ "selector": "typeLike", "format": ["PascalCase"] },
					// Allow UPPER_CASE for enums
					{ "selector": "enumMember", "format": ["PascalCase", "UPPER_CASE"] },
					{
						"selector": "variable",
						"modifiers": ["const"],
						"format": ["camelCase", "PascalCase", "UPPER_CASE"]
					},
					// Ignore unused parameters, to allow the convention of using `_` for an unused parameter.
					{
						"selector": "parameter",
						"modifiers": ["unused"],
						"format": null
					},
					// Allow PascalCase for object literal properties
					{
						"selector": "objectLiteralProperty",
						"format": ["camelCase", "PascalCase"]
					}
				],
				"import/no-cycle": "warn"
			}
		}
	]
}
